{"version":3,"sources":["container/NotFound/NotFound.less","container/Home/component/Chart.js","container/Home/Home.js","container/Teest/Teest.js","container/NotFound/NotFound.js","container/index.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","__webpack_require__","p","refreshIntervalId","Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","reflashData","datas","Math","random","setState","data","callStop","clearInterval","console","log","state","_this2","setInterval","chartRadarData","labels","datasets","label","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointBorderWidth","react_default","a","createElement","className","es","options","scale","ticks","fontSize","beginAtZero","maxTicksLimit","min","max","pointLabels","color","gridLines","onClick","Component","Home","src","logo","alt","component_Chart","Teest","NotFound","Main","HashRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gOCMpCC,EAAoB,EAgFTC,cA5Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKRQ,YAAc,WACZ,IAAMC,EAAQ,CAAiB,GAAhBC,KAAKC,SAA+B,GAAhBD,KAAKC,SAA+B,GAAhBD,KAAKC,SAA+B,GAAhBD,KAAKC,UAChFV,EAAKW,SAAS,CACZC,KAAMJ,KATSR,EAoBnBa,SAAW,WACTC,cAAcjB,GACdkB,QAAQC,IAAI,WAAanB,IApBzBG,EAAKiB,MAAQ,CAAEL,KAAM,CAAC,EAAG,EAAG,EAAG,IAFdZ,mFAaC,IAAAkB,EAAAf,KAClBN,EAAoBsB,YAClB,kBAAMD,EAAKX,eACX,sCAYF,IAAMa,EAAiB,CACrBC,OAAQ,CAAC,YAAa,kBAAmB,UAAW,SAAU,kBAC9DC,SAAU,CAAC,CACTC,MAAO,QACPC,gBAAiB,sBACjBC,YAAa,mBACbC,qBAAsB,mBACtBC,iBAAkB,gBAClBC,0BAA2B,OAC3BC,sBAAuB,kBACvBC,iBAAkB,EAClBlB,KAAMT,KAAKc,MAAML,QA2BrB,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,mBAEEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOvB,KAAMQ,EAAgBgB,QA1BjC,CACEC,MACA,CACEC,MACA,CACEC,SAAU,GACVC,aAAa,EACbC,cAAe,EACfC,IAAK,EACLC,IAAK,IAEPC,YACA,CACEL,SAAU,GACVM,MAAO,WAETC,UACA,CACED,MAAO,eASTd,EAAAC,EAAAC,cAAA,UAAQc,QAAS5C,KAAKU,UAAtB,gBAxEYmC,aCcLC,mLAdX,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKiB,IAAKC,IAAMjB,UAAU,WAAWkB,IAAI,SACzCrB,EAAAC,EAAAC,cAAA,yCAIFF,EAAAC,EAAAC,cAACoB,EAAD,cAVWL,aCKJM,mLARX,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,eAHcc,aCECO,2LAGjB,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAe,8DARLc,cCgBvBQ,EAVF,kBACXzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACI1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACA3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjClB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWR,IAC/BvB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAOE,KAAK,IAAIC,UAAWP,OCFbQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBrF,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.e4c07274.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NotFound.89a7511b.less\";","import React, { Component } from 'react';\r\nimport { Radar } from 'react-chartjs-2';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// global variable\r\nlet start = 0, end = 0, gap = 10, count = start;\r\nlet refreshIntervalId = 0; // Interval refresh ID\r\nlet labelData; // selected file(label.csv) data\r\nclass Chart extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data: [0, 0, 0, 0] };\r\n  }\r\n\r\n  // set Interval reflash data function\r\n  reflashData = () => {\r\n    const datas = [Math.random() * 10, Math.random() * 10, Math.random() * 10, Math.random() * 10];\r\n    this.setState({\r\n      data: datas\r\n    });\r\n  }\r\n  // set Interval event\r\n  componentDidMount() {\r\n    refreshIntervalId = setInterval(\r\n      () => this.reflashData(),\r\n      1000\r\n    );\r\n  }\r\n  // stop button function\r\n  callStop = () => {\r\n    clearInterval(refreshIntervalId);\r\n    console.log('stopID: ' + refreshIntervalId);\r\n  }\r\n  \r\n\r\n  render() {\r\n    // Rader config initial\r\n    const chartRadarData = {\r\n      labels: ['Attention', 'Emotional Level', 'Fatigue', 'Stress', 'Rational Level'],\r\n      datasets: [{\r\n        label: 'Level',\r\n        backgroundColor: 'rgba(255, 0, 0,0.4)',\r\n        borderColor: 'rgba(255,0,0,.6)',\r\n        pointBackgroundColor: 'rgba(63,63,74,1)',\r\n        pointBorderColor: 'rgba(0,0,0,0)',\r\n        pointHoverBackgroundColor: '#fff',\r\n        pointHoverBorderColor: 'rgba(0,0,0,0.3)',\r\n        pointBorderWidth: 5,\r\n        data: this.state.data\r\n      }]\r\n    };\r\n    const chartRadarOptions =\r\n    {\r\n      scale:\r\n      {\r\n        ticks:\r\n        {\r\n          fontSize: 15,\r\n          beginAtZero: true,\r\n          maxTicksLimit: 7,\r\n          min: 0,\r\n          max: 10\r\n        },\r\n        pointLabels:\r\n        {\r\n          fontSize: 16,\r\n          color: '#0044BB'\r\n        },\r\n        gridLines:\r\n        {\r\n          color: '#009FCC'\r\n        }\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"chart\">\r\n        Chart Componment\r\n        <Radar data={chartRadarData} options={chartRadarOptions} />\r\n        <button onClick={this.callStop}>Stop</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React, { Component } from 'react';\nimport logo from '../../logo.svg';\nimport './Home.css';\nimport Chart from './component/Chart';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            NUTN OASE BRI Rardar System\n          </p>\n        </header>\n        <Chart/>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\r\nclass Teest extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Test\">\r\n        test\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Teest;\r\n","import React, { Component } from 'react';\nimport './NotFound.less';\n\nexport default class NotFound extends Component {\n\n  render() {\n    return (\n      <div className=\"page404\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-8 col-md-offset-2\">\n              <h3 className=\"text-center\">{'The page you\\'re looking for could not be found.'}</h3>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\r\n// import package\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n\r\nimport Home from './Home/Home';\r\nimport Teest from './Teest/Teest'\r\nimport NotFound from './NotFound';\r\n\r\nconst Main = () => (\r\n  <Router>\r\n      <Switch>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route path=\"/test\" component={Teest} />\r\n      <Route path=\"*\" component={NotFound} />\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './container/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}